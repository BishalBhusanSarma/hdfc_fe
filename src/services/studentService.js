// Mock data for development - replace with actual API calls
const mockStudents = [
    {
        id: 1,
        name: 'John Doe',
        address: 'Example Address',
        city: 'Example City',
        state: 'Example State',
        email: 'example@example.com',
        phone: '9009009009'
    }
];

// Simulate API delay
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

export const studentService = {
    async getAllStudents() {
        await delay(500); // Simulate network delay

        // In production, this would be an API call:
        // const response = await fetch('/api/students');
        // return response.json();

        return [...mockStudents];
    },

    async createStudent(studentData) {
        await delay(300);

        const newStudent = {
            id: Date.now(), // In production, ID would be generated by backend
            ...studentData
        };

        mockStudents.push(newStudent);

        // In production:
        // const response = await fetch('/api/students', {
        //   method: 'POST',
        //   headers: { 'Content-Type': 'application/json' },
        //   body: JSON.stringify(studentData)
        // });
        // return response.json();

        return newStudent;
    },

    async updateStudent(id, studentData) {
        await delay(300);

        const index = mockStudents.findIndex(s => s.id === id);
        if (index !== -1) {
            mockStudents[index] = { ...mockStudents[index], ...studentData };
        }

        // In production:
        // const response = await fetch(`/api/students/${id}`, {
        //   method: 'PUT',
        //   headers: { 'Content-Type': 'application/json' },
        //   body: JSON.stringify(studentData)
        // });
        // return response.json();

        return mockStudents[index];
    },

    async deleteStudent(id) {
        await delay(300);

        const index = mockStudents.findIndex(s => s.id === id);
        if (index !== -1) {
            mockStudents.splice(index, 1);
        }

        // In production:
        // await fetch(`/api/students/${id}`, { method: 'DELETE' });

        return true;
    }
};